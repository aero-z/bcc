=================
if
else
import
(
)
true
false
[
]
new
=
{
}
;
characterLiteral
numberLiteral
null
stringLiteral
for
*
.
/
%
+
-
<
>
==
!=
&&
||
<=
>=
instanceof
void
identifier
================
AbstractTypeDefinition
TypeDeclaration
ArrayAccess
Expression
ArrayCreation
PrimitiveType
Assignment
Block
ArrayType
Type
Statements
Statement
BodyDeclaration
ClassDeclaration
InterfaceDeclaration
MethodDeclaration
ConstructorDeclaration
FieldDeclaration
Initializer
CastExpression
ClassInstanceCreation
ArgumentsList
CompilationUnit
PackageDeclaration
ImportDeclaration
ImportDeclarations
TypeDeclaration
TypeDeclarations
EmptyStatement
ConditionalExpression
FieldAccess,
InfixExpression
InstanceofExpression
MethodInvocation
Name
ParenthesizedExpression
VariableDeclarationExpression 
ExpressionStatement
StatementExpression
ForStatement
IfStatement
InfixOperator
Modifier
Modifiers
=================



=================
AbstractTypeDefinition TypeDeclaration
ArrayAccess Expression [ Expression ]
ArrayCreation new PrimitiveType [ Expression ]
ArrayCreation new TypeName [ Expression ]
Assignment Expression = Expression
ArrayType Type [ ]
Statements Statements Statement
Block { Statements }
Statements Statement
Block { }
ClassDeclaration ClassDeclaration
ClassDeclaration InterfaceDeclaration
ClassDeclaration MethodDeclaration
ClassDeclaration ConstructorDeclaration
ClassDeclaration FieldDeclaration
ClassDeclaration Initializer
BooleanLiteral true
BooleanLiteral false
CastExpression ( Type ) Expression
ClassInstanceCreation new Name ( ArgumentsList )
ArgumentsList
ArgumentsList Expression
ArgumentsList ArgumentsList , Expression
CompilationUnit PackageDeclaration ImportDeclarations TypeDeclarations
CompilationUnit PackageDeclaration ImportDeclarations
CompilationUnit PackageDeclaration TypeDeclarations
CompilationUnit ImportDeclarations TypeDeclarations
CompilationUnit PackageDeclaration
CompilationUnit ImportDeclarations
CompilationUnit TypeDeclarations
CompilationUnit
ImportDeclarations ImportDeclaration
ImportDeclarations ImportDeclarations ImportDeclaration
TypeDeclarations TypeDeclaration
TypeDeclarations ;
TypeDeclarations TypeDeclarations TypeDeclaration
TypeDeclarations TypeDeclarations ;
EmptyStatement ;
Expression ArrayAccess
Expression ArrayCreation
Expression Assignment
Expression booleanLiteral
Expression CastExpression
Expression characterLiteral
Expression ClassInstanceCreation
Expression FieldAccess
Expression InfixExpression
Expression InstanceofExpression
Expression MethodInvocation
Expression Name
Expression null
Expression numberLiteral
Expression ParenthesizedExpression
Expression stringLiteral
Expression VariableDeclarationExpression
ExpressionStatement StatementExpression ;
FieldAccess Expression . identifier
ForStatement for ( ; ; ) Statement
ForStatement for ( Expression ; ; ) Statement
ForStatement for ( Expression ; Expression ; ) Statement
ForStatement for ( Expression ; Expression ; Expression ) Statement
ForStatement for ( Expression ; ; Expression ) Statement
ForStatement for ( ; Expression ; Expression ) Statement
ForStatement for ( ; Expression ; ) Statement
ForStatement for ( ; ; Expression ) Statement
IfStatement if ( Expression ) Statement 
IfStatement if ( Expression ) Statement else Statement
ImportDeclaration import Name 
ImportDeclaration import Name . *
InfixExpression Expression InfixOperator Expression
InfixOperator *
InfixOperator +
InfixOperator -
InfixOperator /
InfixOperator %
InfixOperator <
InfixOperator >
InfixOperator ==
InfixOperator !=
InfixOperator <=
InfixOperator >=
InfixOperator &&
InfixOperator ||
Modifiers Modifiers Modifier
Modifiers Modifier
InstanceofExpression Expression instanceof Type
MethodDeclaration Modifiers Type identifier ( Parameters ) Block
MethodDeclaration Modifiers void identifier ( ) Block
Parameters Parameters Parameter
Parameters Parameter
Parameter Type identifier

=================